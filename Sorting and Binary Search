#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

 

#define swap(a, b) { \

    __typeof(a) __temp = (a); \

    (a) = (b); (b) = __temp; \

}

 

void insert_sort(int *arr, int n) {

    for (int i = 1; i < n; i++) {

        for (int j = i; j >= 1; j--) {

            if (arr[j] > arr[j - 1]) {

                swap(arr[j], arr[j - 1]);

            } else {

                break;

            }

        }

    }

    return ;

}

 

void bubble_sort(int *arr, int n) {

    int times = 1;

    for (int i = n - 1; i >= 1 && times; i--) {

        times = 0;

        for (int j = 0; j < i; j++) {

            if (arr[j] > arr[j + 1]) {

                swap(arr[j], arr[j + 1]);

                times++;

            }

        }

    }

    return ;

}

 

void merge_sort(int *arr, int l, int r) {

    if (r <= l) return ;

    if (r - l == 1) {

        if (arr[r] < arr[l]) {

            swap(arr[r], arr[l]);

        }

        return ;

    }

    int mid = (l + r) / 2;

    merge_sort(arr, l, mid);

    merge_sort(arr, mid + 1, r);

    int *temp = (int *)malloc(sizeof(int) * (r - l + 1));

    int x = l, y = mid + 1, k = 0;

    while (x <= mid || y <= r) {

        if (y > r || (x <= mid && arr[x] <= arr[y])) {

            temp[k++] = arr[x++];

        } else if (x > mid || (y <= r && arr[y] < arr[x])) {

            temp[k++] = arr[y++];

        }

    }

    memcpy(arr + l, temp, sizeof(int) * (r - l + 1));

    free(temp);

}

 

void quick_sort(int *arr, int l, int r) {

    while (r - l >= 1) {

        int x, y, z;

        x = l, y = r, z = arr[l];

        while (x < y) {

            while (x < y && arr[y] >= z) --y;

            if (x < y) arr[x++] = arr[y];

            while (x < y && arr[x] <= z) ++x;

            if (x < y) arr[y--] = arr[x];

        }

        arr[x] = z;

        quick_sort(arr, x + 1, r);

        r = x - 1;

    }

    return ;

}

 

void output(int *arr, int n) {

    printf("[ ");

    for (int i = 0; i < n; i++) {

        printf("%d ", arr[i]);

    }

    printf("]\n");

}

 

int binary_search(int *arr, int n, int value) {

    int l, r, mid;

    l = 0, r = n - 1;

    while (l < r) {

        mid = (l + r + 1) / 2;

        if (arr[mid] == value) {

            l = mid;

        } else if (arr[mid] < value) {

            l = mid + 1;

        } else {

            r = mid - 1;

        }

    }

    return arr[l] == value ? l : -1;

}

 

void output2(int *arr, int n, int value) {

    int ret = 0, index = binary_search(arr, n, value);

    ret += printf("[");

    for (int i = 0; i < n; i++) {

        if (i <= index) {

            ret += printf(" %d", arr[i]);

        } else {

            printf(" %d", arr[i]);

        }

    }

    printf(" ]\n");

    int ret1 = ret;

    while (--ret1) {

        printf(" ");

    }

    printf("^\n");

    ret1 = ret;

    while (--ret1) {

        printf(" ");

    }

    printf("|\n\n");

}

 

int main() {

    int n, a;

    int arr[100] = {1, 2, 3, 4, 5, 5, 7, 7, 8, 9};

    while (scanf("%d", &n) != EOF) {

        output2(arr, 10, n);

    }

    for (int i = 0; i < n; i++) {

        scanf("%d", arr + i);

    }

    quick_sort(arr, 0, n - 1);

    output(arr, n);

    insert_sort(arr, n);

    output(arr, n);

    bubble_sort(arr, n);

    output(arr, n);

    return 0;

}

 

